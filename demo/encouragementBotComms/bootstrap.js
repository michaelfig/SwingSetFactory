import harden from '@agoric/harden';

console.log(`=> loading bootstrap.js`);

export default function setup(syscall, state, helpers) {
  function log(what) {
    helpers.log(what);
    console.log(what);
  }
  log(`=> setup called`);
  return helpers.makeLiveSlots(
    syscall,
    state,
    (E, D) =>
      harden({
        async bootstrap(argv, vats, devices) {
          console.log('=> bootstrap() called');

          const BOT = 'bot';
          const USER = 'user';
          const BOT_CLIST_INDEX = 0;

          D(devices.loopbox).registerInboundHandler(USER, vats.uservattp);
          const usersender = D(devices.loopbox).makeSender(USER);
          await E(vats.uservattp).registerMailboxDevice(usersender);
          await E(vats.usercomms).init(vats.uservattp);

          D(devices.loopbox).registerInboundHandler(BOT, vats.botvattp);
          const botsender = D(devices.loopbox).makeSender(BOT);
          await E(vats.botvattp).registerMailboxDevice(botsender);
          await E(vats.botcomms).init(vats.botvattp);

          await E(vats.botcomms).addEgress(
            USER,
            BOT_CLIST_INDEX, // this would normally be autogenerated
            vats.bot,
          );

          const pPBot = E(vats.usercomms).addIngress(BOT, BOT_CLIST_INDEX);
          E(vats.user)
            .talkToBot(pPBot, 'bot')
            .then(
              r =>
                log(
                  `=> the promise given by the call to user.talkToBot resolved to '${r}'`,
                ),
              err =>
                log(
                  `=> the promise given by the call to user.talkToBot was rejected '${err}''`,
                ),
            );
        },
      }),
    helpers.vatID,
  );
}
